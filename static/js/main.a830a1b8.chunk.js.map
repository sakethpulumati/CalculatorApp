{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","result","setResult","inputRef","useRef","handleClick","e","concat","target","name","backSpace","slice","length","clear","calculate","eval","toString","error","useEffect","current","focus","className","type","placeholder","value","ref","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"i2BAMA,SAASA,MACP,cAA2BC,oDAAS,IAApC,0MAAOC,OAAP,cAAcC,UAAd,cACMC,SAAWC,kDAAO,MAKxB,SAASC,YAAYC,GAEnBJ,UAAUD,OAAOM,OAAOD,EAAEE,OAAOC,OAGnC,SAASC,YAEPR,UAAUD,OAAOU,MAAM,EAAEV,OAAOW,OAAO,IAGzC,SAASC,QAEPX,UAAU,IAGZ,SAASY,YAEP,IAEEZ,UAAUa,KAAKd,QAAQe,YAEzB,MAAMC,OAEJf,UAAU,YAId,OA9BAgB,sDAAU,kBAAKf,SAASgB,QAAQC,WA+B9B,mEAAKC,UAAU,WAAf,UAEE,4EACE,oEAAOC,KAAK,OAAOC,YAAY,QAAQC,MAAOvB,OAAQwB,IAAKtB,aAG7D,mEAAKkB,UAAU,SAAf,UACE,qEAAQK,GAAG,QAAQC,QAASd,MAA5B,mBACA,qEAAQa,GAAG,YAAYC,QAASjB,UAAhC,oBACA,qEAAQW,UAAU,aAAaZ,KAAK,IAAIkB,QAAStB,YAAjD,eACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQgB,UAAU,aAAYZ,KAAK,IAAIkB,QAAStB,YAAhD,eACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQgB,UAAU,aAAaZ,KAAK,IAAIkB,QAAStB,YAAjD,kBACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQgB,UAAU,aAAaZ,KAAK,IAAIkB,QAAStB,YAAjD,eACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQI,KAAK,IAAIkB,QAAStB,YAA1B,eACA,qEAAQqB,GAAG,SAASC,QAASb,UAA7B,0BAMOf,2B,iIC3DA6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxC,EAAA,EAAD,MAEFyC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a830a1b8.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n//https://www.youtube.com/watch?v=OzUHZGOk0kA\n//sourceytlink\n\nfunction App() {\n  const [result,setResult] = useState(\"\");\n  const inputRef = useRef(null);\n\n  useEffect(()=> inputRef.current.focus());\n\n\n  function handleClick(e)\n  {\n    setResult(result.concat(e.target.name))\n  }\n\n  function backSpace()\n  {\n    setResult(result.slice(0,result.length-1))\n  }\n\n  function clear()\n  {\n    setResult(\"\")\n  }\n   \n  function calculate()\n  {\n    try\n    {\n      setResult(eval(result).toString());\n    }\n    catch(error)\n    {\n      setResult(\"ERROR!!\")\n    }\n  }\n\n  return (\n    <div className=\"calc-app\">\n      {/* <h1>Calculator using React-Hooks</h1> */}\n      <from>\n        <input type=\"text\" placeholder=\"ENTER\" value={result} ref={inputRef}/>\n      </from>\n       \n      <div className=\"keypad\">\n        <button id=\"clear\" onClick={clear}>Clear</button>\n        <button id=\"backspace\" onClick={backSpace}>‚Üê</button>\n        <button className=\"operations\" name=\"+\" onClick={handleClick}>+</button>\n        <button name=\"7\" onClick={handleClick}>7</button>\n        <button name=\"8\" onClick={handleClick}>8</button>\n        <button name=\"9\" onClick={handleClick}>9</button>\n        <button className=\"operations\"name=\"-\" onClick={handleClick}>-</button>\n        <button name=\"4\" onClick={handleClick}>4</button>\n        <button name=\"5\" onClick={handleClick}>5</button>\n        <button name=\"6\" onClick={handleClick}>6</button>\n        <button className=\"operations\" name=\"*\" onClick={handleClick}>&times;</button>\n        <button name=\"1\" onClick={handleClick}>1</button>\n        <button name=\"2\" onClick={handleClick}>2</button>\n        <button name=\"3\" onClick={handleClick}>3</button>\n        <button className=\"operations\" name=\"/\" onClick={handleClick}>/</button>\n        <button name=\"0\" onClick={handleClick}>0</button>\n        <button name=\".\" onClick={handleClick}>.</button>\n        <button id=\"result\" onClick={calculate}>Result</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}